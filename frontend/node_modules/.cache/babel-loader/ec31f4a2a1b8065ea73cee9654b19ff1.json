{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport React, { PureComponent } from 'react';\nimport { bind, clear } from 'size-sensor';\nimport { pick } from './helper/pick';\nimport { isFunction } from './helper/is-function';\nimport { isString } from './helper/is-string';\nimport { isEqual } from './helper/is-equal';\n/**\n * core component for echarts binding\n */\nvar EChartsReactCore = /** @class */function (_super) {\n  __extends(EChartsReactCore, _super);\n  function EChartsReactCore(props) {\n    var _this = _super.call(this, props) || this;\n    _this.echarts = props.echarts;\n    _this.ele = null;\n    _this.isInitialResize = true;\n    return _this;\n  }\n  EChartsReactCore.prototype.componentDidMount = function () {\n    this.renderNewEcharts();\n  };\n  // update\n  EChartsReactCore.prototype.componentDidUpdate = function (prevProps) {\n    /**\n     * if shouldSetOption return false, then return, not update echarts options\n     * default is true\n     */\n    var shouldSetOption = this.props.shouldSetOption;\n    if (isFunction(shouldSetOption) && !shouldSetOption(prevProps, this.props)) {\n      return;\n    }\n    // 以下属性修改的时候，需要 dispose 之后再新建\n    // 1. 切换 theme 的时候\n    // 2. 修改 opts 的时候\n    // 3. 修改 onEvents 的时候，这样可以取消所有之前绑定的事件 issue #151\n    if (!isEqual(prevProps.theme, this.props.theme) || !isEqual(prevProps.opts, this.props.opts) || !isEqual(prevProps.onEvents, this.props.onEvents)) {\n      this.dispose();\n      this.renderNewEcharts(); // 重建\n      return;\n    }\n    // when these props are not isEqual, update echarts\n    var pickKeys = ['option', 'notMerge', 'lazyUpdate', 'showLoading', 'loadingOption'];\n    if (!isEqual(pick(this.props, pickKeys), pick(prevProps, pickKeys))) {\n      this.updateEChartsOption();\n    }\n    /**\n     * when style or class name updated, change size.\n     */\n    if (!isEqual(prevProps.style, this.props.style) || !isEqual(prevProps.className, this.props.className)) {\n      this.resize();\n    }\n  };\n  EChartsReactCore.prototype.componentWillUnmount = function () {\n    this.dispose();\n  };\n  /**\n   * return the echart object\n   * 1. if exist, return the existed instance\n   * 2. or new one instance\n   */\n  EChartsReactCore.prototype.getEchartsInstance = function () {\n    return this.echarts.getInstanceByDom(this.ele) || this.echarts.init(this.ele, this.props.theme, this.props.opts);\n  };\n  /**\n   * dispose echarts and clear size-sensor\n   */\n  EChartsReactCore.prototype.dispose = function () {\n    if (this.ele) {\n      try {\n        clear(this.ele);\n      } catch (e) {\n        console.warn(e);\n      }\n      // dispose echarts instance\n      this.echarts.dispose(this.ele);\n    }\n  };\n  /**\n   * render a new echarts instance\n   */\n  EChartsReactCore.prototype.renderNewEcharts = function () {\n    var _this = this;\n    var _a = this.props,\n      onEvents = _a.onEvents,\n      onChartReady = _a.onChartReady;\n    // 1. new echarts instance\n    var echartsInstance = this.updateEChartsOption();\n    // 2. bind events\n    this.bindEvents(echartsInstance, onEvents || {});\n    // 3. on chart ready\n    if (isFunction(onChartReady)) onChartReady(echartsInstance);\n    // 4. on resize\n    if (this.ele) {\n      bind(this.ele, function () {\n        _this.resize();\n      });\n    }\n  };\n  // bind the events\n  EChartsReactCore.prototype.bindEvents = function (instance, events) {\n    function _bindEvent(eventName, func) {\n      // ignore the event config which not satisfy\n      if (isString(eventName) && isFunction(func)) {\n        // binding event\n        instance.on(eventName, function (param) {\n          func(param, instance);\n        });\n      }\n    }\n    // loop and bind\n    for (var eventName in events) {\n      if (Object.prototype.hasOwnProperty.call(events, eventName)) {\n        _bindEvent(eventName, events[eventName]);\n      }\n    }\n  };\n  /**\n   * render the echarts\n   */\n  EChartsReactCore.prototype.updateEChartsOption = function () {\n    var _a = this.props,\n      option = _a.option,\n      _b = _a.notMerge,\n      notMerge = _b === void 0 ? false : _b,\n      _c = _a.lazyUpdate,\n      lazyUpdate = _c === void 0 ? false : _c,\n      showLoading = _a.showLoading,\n      _d = _a.loadingOption,\n      loadingOption = _d === void 0 ? null : _d;\n    // 1. get or initial the echarts object\n    var echartInstance = this.getEchartsInstance();\n    // 2. set the echarts option\n    echartInstance.setOption(option, notMerge, lazyUpdate);\n    // 3. set loading mask\n    if (showLoading) echartInstance.showLoading(loadingOption);else echartInstance.hideLoading();\n    return echartInstance;\n  };\n  /**\n   * resize wrapper\n   */\n  EChartsReactCore.prototype.resize = function () {\n    // 1. get the echarts object\n    var echartsInstance = this.getEchartsInstance();\n    // 2. call echarts instance resize if not the initial resize\n    // resize should not happen on first render as it will cancel initial echarts animations\n    if (!this.isInitialResize) {\n      try {\n        echartsInstance.resize();\n      } catch (e) {\n        console.warn(e);\n      }\n    }\n    // 3. update variable for future calls\n    this.isInitialResize = false;\n  };\n  EChartsReactCore.prototype.render = function () {\n    var _this = this;\n    var _a = this.props,\n      style = _a.style,\n      _b = _a.className,\n      className = _b === void 0 ? '' : _b;\n    // default height = 300\n    var newStyle = __assign({\n      height: 300\n    }, style);\n    return React.createElement(\"div\", {\n      ref: function ref(e) {\n        _this.ele = e;\n      },\n      style: newStyle,\n      className: \"echarts-for-react \" + className\n    });\n  };\n  return EChartsReactCore;\n}(PureComponent);\nexport default EChartsReactCore;","map":{"version":3,"mappings":"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","names":["React","PureComponent","bind","clear","pick","isFunction","isString","isEqual","__extends","props","_super","_this","echarts","ele","isInitialResize","EChartsReactCore","renderNewEcharts","prevProps","shouldSetOption","theme","opts","onEvents","dispose","pickKeys","updateEChartsOption","style","className","resize","getInstanceByDom","init","e","console","warn","onChartReady","echartsInstance","bindEvents","instance","events","_bindEvent","eventName","func","on","param","Object","prototype","hasOwnProperty","call","option","_b","notMerge","_c","lazyUpdate","showLoading","_d","loadingOption","echartInstance","getEchartsInstance","setOption","hideLoading","newStyle","height","ref"],"sources":["C:\\AAA Kithmina\\Education\\SLIIT\\Year 3\\Y3S1\\Disributed Systems - SE3020\\Assignments\\01\\Project\\Collaborative-shopping-platform\\frontend\\node_modules\\echarts-for-react\\src\\core.tsx"],"sourcesContent":["import type { ECharts } from 'echarts';\nimport React, { PureComponent } from 'react';\nimport { bind, clear } from 'size-sensor';\nimport { pick } from './helper/pick';\nimport { isFunction } from './helper/is-function';\nimport { isString } from './helper/is-string';\nimport { isEqual } from './helper/is-equal';\nimport { EChartsReactProps, EChartsInstance } from './types';\n\n/**\n * core component for echarts binding\n */\nexport default class EChartsReactCore extends PureComponent<EChartsReactProps> {\n  /**\n   * echarts render container\n   */\n  public ele: HTMLElement;\n\n  /**\n   * if this is the first time we are resizing\n   */\n  private isInitialResize: boolean;\n\n  /**\n   * echarts library entry\n   */\n  protected echarts: any;\n\n  constructor(props: EChartsReactProps) {\n    super(props);\n\n    this.echarts = props.echarts;\n    this.ele = null;\n    this.isInitialResize = true;\n  }\n\n  componentDidMount() {\n    this.renderNewEcharts();\n  }\n\n  // update\n  componentDidUpdate(prevProps: EChartsReactProps) {\n    /**\n     * if shouldSetOption return false, then return, not update echarts options\n     * default is true\n     */\n    const { shouldSetOption } = this.props;\n    if (isFunction(shouldSetOption) && !shouldSetOption(prevProps, this.props)) {\n      return;\n    }\n\n    // 以下属性修改的时候，需要 dispose 之后再新建\n    // 1. 切换 theme 的时候\n    // 2. 修改 opts 的时候\n    // 3. 修改 onEvents 的时候，这样可以取消所有之前绑定的事件 issue #151\n    if (\n      !isEqual(prevProps.theme, this.props.theme) ||\n      !isEqual(prevProps.opts, this.props.opts) ||\n      !isEqual(prevProps.onEvents, this.props.onEvents)\n    ) {\n      this.dispose();\n\n      this.renderNewEcharts(); // 重建\n      return;\n    }\n\n    // when these props are not isEqual, update echarts\n    const pickKeys = ['option', 'notMerge', 'lazyUpdate', 'showLoading', 'loadingOption'];\n    if (!isEqual(pick(this.props, pickKeys), pick(prevProps, pickKeys))) {\n      this.updateEChartsOption();\n    }\n\n    /**\n     * when style or class name updated, change size.\n     */\n    if (!isEqual(prevProps.style, this.props.style) || !isEqual(prevProps.className, this.props.className)) {\n      this.resize();\n    }\n  }\n\n  componentWillUnmount() {\n    this.dispose();\n  }\n\n  /**\n   * return the echart object\n   * 1. if exist, return the existed instance\n   * 2. or new one instance\n   */\n  public getEchartsInstance(): ECharts {\n    return this.echarts.getInstanceByDom(this.ele) || this.echarts.init(this.ele, this.props.theme, this.props.opts);\n  }\n\n  /**\n   * dispose echarts and clear size-sensor\n   */\n  private dispose() {\n    if (this.ele) {\n      try {\n        clear(this.ele);\n      } catch (e) {\n        console.warn(e);\n      }\n      // dispose echarts instance\n      this.echarts.dispose(this.ele);\n    }\n  }\n\n  /**\n   * render a new echarts instance\n   */\n  private renderNewEcharts() {\n    const { onEvents, onChartReady } = this.props;\n\n    // 1. new echarts instance\n    const echartsInstance = this.updateEChartsOption();\n\n    // 2. bind events\n    this.bindEvents(echartsInstance, onEvents || {});\n\n    // 3. on chart ready\n    if (isFunction(onChartReady)) onChartReady(echartsInstance);\n\n    // 4. on resize\n    if (this.ele) {\n      bind(this.ele, () => {\n        this.resize();\n      });\n    }\n  }\n\n  // bind the events\n  private bindEvents(instance, events: EChartsReactProps['onEvents']) {\n    function _bindEvent(eventName: string, func: Function) {\n      // ignore the event config which not satisfy\n      if (isString(eventName) && isFunction(func)) {\n        // binding event\n        instance.on(eventName, (param) => {\n          func(param, instance);\n        });\n      }\n    }\n\n    // loop and bind\n    for (const eventName in events) {\n      if (Object.prototype.hasOwnProperty.call(events, eventName)) {\n        _bindEvent(eventName, events[eventName]);\n      }\n    }\n  }\n\n  /**\n   * render the echarts\n   */\n  private updateEChartsOption(): EChartsInstance {\n    const { option, notMerge = false, lazyUpdate = false, showLoading, loadingOption = null } = this.props;\n    // 1. get or initial the echarts object\n    const echartInstance = this.getEchartsInstance();\n    // 2. set the echarts option\n    echartInstance.setOption(option, notMerge, lazyUpdate);\n    // 3. set loading mask\n    if (showLoading) echartInstance.showLoading(loadingOption);\n    else echartInstance.hideLoading();\n\n    return echartInstance;\n  }\n\n  /**\n   * resize wrapper\n   */\n  private resize() {\n    // 1. get the echarts object\n    const echartsInstance = this.getEchartsInstance();\n\n    // 2. call echarts instance resize if not the initial resize\n    // resize should not happen on first render as it will cancel initial echarts animations\n    if (!this.isInitialResize) {\n      try {\n        echartsInstance.resize();\n      } catch (e) {\n        console.warn(e);\n      }\n    }\n\n    // 3. update variable for future calls\n    this.isInitialResize = false;\n  }\n\n  render(): JSX.Element {\n    const { style, className = '' } = this.props;\n    // default height = 300\n    const newStyle = { height: 300, ...style };\n\n    return (\n      <div\n        ref={(e: HTMLElement) => {\n          this.ele = e;\n        }}\n        style={newStyle}\n        className={`echarts-for-react ${className}`}\n      />\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}