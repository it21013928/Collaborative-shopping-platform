{"ast":null,"code":"import _objectSpread from \"C:/AAA Kithmina/Education/SLIIT/Year 3/Y3S1/Disributed Systems - SE3020/Assignments/01/Project/Collaborative-shopping-platform/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _regeneratorRuntime from \"C:/AAA Kithmina/Education/SLIIT/Year 3/Y3S1/Disributed Systems - SE3020/Assignments/01/Project/Collaborative-shopping-platform/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/AAA Kithmina/Education/SLIIT/Year 3/Y3S1/Disributed Systems - SE3020/Assignments/01/Project/Collaborative-shopping-platform/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport Mock from '../mock';\n\n// const JWT_SECRET = 'jwt_secret_key';\n// const JWT_VALIDITY = '7 days';\n\nvar userList = [{\n  id: 1,\n  role: 'SA',\n  name: 'Jason Alexander',\n  username: 'jason_alexander',\n  email: 'jason@ui-lib.com',\n  avatar: '/assets/images/face-6.jpg',\n  age: 25\n}];\n\n// FOLLOWING CODES ARE MOCK SERVER IMPLEMENTATION\n// YOU NEED TO BUILD YOUR OWN SERVER\n// IF YOU NEED HELP ABOUT SERVER SIDE IMPLEMENTATION\n// CONTACT US AT support@ui-lib.com\n\nMock.onPost('/api/auth/login').reply( /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(config) {\n    var _JSON$parse, email, user, payload;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _JSON$parse = JSON.parse(config.data), email = _JSON$parse.email;\n            user = userList.find(function (u) {\n              return u.email === email;\n            });\n            if (user) {\n              _context.next = 5;\n              break;\n            }\n            return _context.abrupt(\"return\", [400, {\n              message: 'Invalid email or password'\n            }]);\n          case 5:\n            payload = {\n              user: userList[0]\n            };\n            return _context.abrupt(\"return\", [200, payload]);\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](0);\n            console.error(_context.t0);\n            return _context.abrupt(\"return\", [500, {\n              message: 'Internal server error'\n            }]);\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 9]]);\n  }));\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}());\nMock.onPost('/api/auth/register').reply(function (config) {\n  try {\n    var _JSON$parse2 = JSON.parse(config.data),\n      email = _JSON$parse2.email,\n      username = _JSON$parse2.username;\n    var user = userList.find(function (u) {\n      return u.email === email;\n    });\n    if (user) return [400, {\n      message: 'User already exists!'\n    }];\n    var newUser = {\n      id: 2,\n      role: 'GUEST',\n      name: 'Unknown',\n      age: 25,\n      email: email,\n      username: username,\n      avatar: '/assets/images/face-6.jpg'\n    };\n    userList.push(newUser);\n    var payload = {\n      user: _objectSpread({}, newUser)\n    };\n    return [200, payload];\n  } catch (err) {\n    console.error(err);\n    return [500, {\n      message: 'Internal server error'\n    }];\n  }\n});\nMock.onGet('/api/auth/profile').reply(function (config) {\n  try {\n    // const { Authorization } = config.headers;\n    // if (!Authorization) {\n    //   return [401, { message: 'Invalid Authorization token' }];\n    // }\n\n    // const accessToken = Authorization.split(' ')[1];\n    // const { userId } = jwt.verify(accessToken, JWT_SECRET);\n    // const user = userList.find((u) => u.id === userId);\n\n    // if (!user) {\n    //   return [401, { message: 'Invalid authorization token' }];\n    // }\n\n    var payload = {\n      user: userList[0]\n    };\n    return [200, payload];\n  } catch (err) {\n    console.error(err);\n    return [500, {\n      message: 'Internal server error'\n    }];\n  }\n});","map":{"version":3,"names":["Mock","userList","id","role","name","username","email","avatar","age","onPost","reply","config","JSON","parse","data","user","find","u","message","payload","console","error","newUser","push","err","onGet"],"sources":["C:/AAA Kithmina/Education/SLIIT/Year 3/Y3S1/Disributed Systems - SE3020/Assignments/01/Project/Collaborative-shopping-platform/frontend/src/fake-db/db/auth.js"],"sourcesContent":["import Mock from '../mock';\r\n\r\n// const JWT_SECRET = 'jwt_secret_key';\r\n// const JWT_VALIDITY = '7 days';\r\n\r\nconst userList = [\r\n  {\r\n    id: 1,\r\n    role: 'SA',\r\n    name: 'Jason Alexander',\r\n    username: 'jason_alexander',\r\n    email: 'jason@ui-lib.com',\r\n    avatar: '/assets/images/face-6.jpg',\r\n    age: 25\r\n  }\r\n];\r\n\r\n// FOLLOWING CODES ARE MOCK SERVER IMPLEMENTATION\r\n// YOU NEED TO BUILD YOUR OWN SERVER\r\n// IF YOU NEED HELP ABOUT SERVER SIDE IMPLEMENTATION\r\n// CONTACT US AT support@ui-lib.com\r\n\r\nMock.onPost('/api/auth/login').reply(async (config) => {\r\n  try {\r\n    const { email } = JSON.parse(config.data);\r\n    const user = userList.find((u) => u.email === email);\r\n\r\n    if (!user) return [400, { message: 'Invalid email or password' }];\r\n\r\n    const payload = { user: userList[0] };\r\n    return [200, payload];\r\n  } catch (err) {\r\n    console.error(err);\r\n    return [500, { message: 'Internal server error' }];\r\n  }\r\n});\r\n\r\nMock.onPost('/api/auth/register').reply((config) => {\r\n  try {\r\n    const { email, username } = JSON.parse(config.data);\r\n    const user = userList.find((u) => u.email === email);\r\n\r\n    if (user) return [400, { message: 'User already exists!' }];\r\n\r\n    const newUser = {\r\n      id: 2,\r\n      role: 'GUEST',\r\n      name: 'Unknown',\r\n      age: 25,\r\n      email: email,\r\n      username: username,\r\n      avatar: '/assets/images/face-6.jpg'\r\n    };\r\n\r\n    userList.push(newUser);\r\n\r\n    const payload = { user: { ...newUser } };\r\n    return [200, payload];\r\n  } catch (err) {\r\n    console.error(err);\r\n    return [500, { message: 'Internal server error' }];\r\n  }\r\n});\r\n\r\nMock.onGet('/api/auth/profile').reply((config) => {\r\n  try {\r\n    // const { Authorization } = config.headers;\r\n    // if (!Authorization) {\r\n    //   return [401, { message: 'Invalid Authorization token' }];\r\n    // }\r\n\r\n    // const accessToken = Authorization.split(' ')[1];\r\n    // const { userId } = jwt.verify(accessToken, JWT_SECRET);\r\n    // const user = userList.find((u) => u.id === userId);\r\n\r\n    // if (!user) {\r\n    //   return [401, { message: 'Invalid authorization token' }];\r\n    // }\r\n\r\n    const payload = { user: userList[0] };\r\n    return [200, payload];\r\n  } catch (err) {\r\n    console.error(err);\r\n    return [500, { message: 'Internal server error' }];\r\n  }\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}